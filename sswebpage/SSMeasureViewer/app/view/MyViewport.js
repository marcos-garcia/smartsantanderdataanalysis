/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SSMeasureViewer.view.MyViewport', {
    extend: 'Ext.container.Viewport',

    requires: [
        'Ext.form.Panel',
        'Ext.form.field.ComboBox',
        'Ext.button.Button'
    ],

    layout: 'border',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    floating: true,
                    id: 'form',
                    itemId: 'form',
                    fixed: true,
                    shadow: false,
                    defaultAlign: 'other-tr',
                    header: false,
                    title: 'Smart Santander Measure Viewer',
                    items: [
                        {
                            xtype: 'form',
                            fixed: true,
                            toFrontOnShow: false,
                            bodyPadding: 10,
                            header: false,
                            layout: {
                                type: 'hbox',
                                align: 'stretch'
                            },
                            items: [
                                {
                                    xtype: 'combobox',
                                    flex: 1,
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    displayField: 'measure',
                                    queryMode: 'local',
                                    store: 'measureDimStore',
                                    valueField: 'measure',
                                    listeners: {
                                        change: {
                                            fn: me.onComboboxChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'textfield',
                                    padding: '0 15 0 15',
                                    focusOnToFront: false,
                                    toFrontOnShow: false,
                                    fieldLabel: 'Label',
                                    hideLabel: true,
                                    inputId: 'dtpicker',
                                    emptyText: 'Choose a date...',
                                    listeners: {
                                        afterrender: {
                                            fn: me.onTextfieldAfterRender,
                                            scope: me
                                        },
                                        change: {
                                            fn: me.onTextfieldChange,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    text: 'Show',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ],
                    listeners: {
                        afterrender: {
                            fn: me.onFormAfterRender,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    floatable: false,
                    region: 'center',
                    id: 'mapPanel',
                    fixed: true,
                    focusOnToFront: false,
                    toFrontOnShow: false,
                    header: false,
                    manageHeight: false,
                    title: 'mapPanel',
                    listeners: {
                        afterrender: {
                            fn: me.onMapPanelAfterRender,
                            scope: me
                        }
                    }
                }
            ]
        });

        me.callParent(arguments);
    },

    onComboboxChange: function(field, newValue, oldValue, eOpts) {
        window.selectedmeasure=newValue;
        window.selectedmeasuremean=field.displayTplData[0].mean;
        window.selectedmeasurestddev=field.displayTplData[0].stddev;
        console.log(field);
    },

    onTextfieldAfterRender: function(component, eOpts) {
        jQuery('#dtpicker').datetimepicker({
            format:'Y-m-d H:i:00',
          inline:false,
         allowTimes:[
        '00:00', '00:15', '00:30', '00:45',
        '01:00', '01:15', '01:30', '01:45',
        '02:00', '02:15', '02:30', '02:45',
        '03:00', '03:15', '03:30', '03:45',
        '04:00', '04:15', '04:30', '04:45',
        '05:00', '05:15', '05:30', '05:45',
        '06:00', '06:15', '06:30', '06:45',
        '07:00', '07:15', '07:30', '07:45',
        '08:00', '08:15', '08:30', '08:45',
        '09:00', '09:15', '09:30', '09:45',
        '10:00', '10:15', '10:30', '10:45',
        '11:00', '11:15', '11:30', '11:45',
        '12:00', '12:15', '12:30', '12:45',
        '13:00', '13:15', '13:30', '13:45',
        '14:00', '14:15', '14:30', '14:45',
        '15:00', '15:15', '15:30', '15:45',
        '16:00', '16:15', '16:30', '16:45',
        '17:00', '17:15', '17:30', '17:45',
        '18:00', '18:15', '18:30', '18:45',
        '19:00', '19:15', '19:30', '19:45',
        '20:00', '20:15', '20:30', '20:45',
        '21:00', '21:15', '21:30', '21:45',
        '22:00', '22:15', '22:30', '22:45',
        '23:00', '23:15', '23:30', '23:45'
         ],
          onChangeDateTime:function(dp,$input){
            window.selecteddate = $input.val();
          }
        });
    },

    onTextfieldChange: function(field, newValue, oldValue, eOpts) {
        window.selecteddate=newValue;
    },

    onButtonClick: function(button, e, eOpts) {
        if(!(window.selectedmeasure === undefined || window.selecteddate === undefined)){
          SSMeasureViewer.getApplication().getController('MapDataController').requestData(window.selectedmeasure,window.selecteddate);
        }
    },

    onFormAfterRender: function(component, eOpts) {
        component.setPosition(50,11);
    },

    onMapPanelAfterRender: function(component, eOpts) {
        L.mapbox.accessToken = 'pk.eyJ1IjoibWFyY29zZ2FyY2lhY2FzYWRvIiwiYSI6Ild2VjVZU2MifQ.Bmu6M3w5K0Kcqti3hDFaQQ';
        var map = L.mapbox.map('mapPanel-innerCt', 'marcosgarciacasado.j41hkh3h');

        window.map = map;

        var panel = Ext.getCmp('form');
        panel.show();
    }

});