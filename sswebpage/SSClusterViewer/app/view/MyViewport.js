/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('SSClusterViewer.view.MyViewport', {
    extend: 'Ext.container.Viewport',

    requires: [
        'Ext.panel.Panel'
    ],

    layout: 'border',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    flex: 5,
                    region: 'center',
                    id: 'chartPanel',
                    itemId: 'chartPanel',
                    header: false,
                    title: 'My Panel',
                    listeners: {
                        afterrender: {
                            fn: me.onChartPanelAfterRender,
                            scope: me
                        },
                        resize: {
                            fn: me.onChartPanelResize,
                            scope: me
                        }
                    }
                },
                {
                    xtype: 'panel',
                    flex: 1,
                    region: 'west',
                    width: 170,
                    layout: 'border',
                    header: false,
                    title: 'My Panel',
                    dockedItems: [
                        {
                            xtype: 'panel',
                            flex: 1,
                            region: 'north',
                            dock: 'top',
                            html: '<br/>\n<div align=\'center\'>\n<a href="javascript:SSClusterViewer.getApplication().getController(\'ChartController\').loadCluster(1);" class="button-small" style="text-decoration:none; color: white; background-color: #b4cbaf; background: linear-gradient(top, #00b5e5, #008db2);">Cluster 1</a>\n    <a href="javascript:SSClusterViewer.getApplication().getController(\'ChartController\').loadCluster(2);" class="button-small" style="text-decoration:none; color: white; background-color: #acbe7d; background: linear-gradient(top, #00b5e5, #008db2);">Cluster 2</a>\n    <a href="javascript:SSClusterViewer.getApplication().getController(\'ChartController\').loadCluster(3);" class="button-small" style="text-decoration:none; color: white; background-color: #b6aa46; background: linear-gradient(top, #00b5e5, #008db2);">Cluster 3</a>\n    <a href="javascript:SSClusterViewer.getApplication().getController(\'ChartController\').loadCluster(4);" class="button-small" style="text-decoration:none; color: white; background-color: #ca8f00; background: linear-gradient(top, #00b5e5, #008db2);">Cluster 4</a>\n    <a href="javascript:SSClusterViewer.getApplication().getController(\'ChartController\').loadCluster(5);" class="button-small" style="text-decoration:none; color: white; background-color: #e56800; background: linear-gradient(top, #00b5e5, #008db2);">Cluster 5</a>\n    <a href="javascript:SSClusterViewer.getApplication().getController(\'ChartController\').loadCluster(6);" class="button-small" style="text-decoration:none; color: white; background-color: #ff0000; background: linear-gradient(top, #00b5e5, #008db2);">Cluster 6</a>\n</div>\n<br/>',
                            id: 'clusterPanel',
                            itemId: 'clusterPanel',
                            title: 'Clusters'
                        },
                        {
                            xtype: 'panel',
                            dock: 'bottom',
                            html: '<br/>\n<div align=\'center\'>\n<a href="javascript:window.calDays.previous()" class="button button-rounded button-flat-primary">\n        <i class="fa fa-caret-up"></i>\n    </a>\n<a href="javascript:window.calDays.next()" class="button button-rounded button-flat-primary">\n        <i class="fa fa-caret-down"></i>\n    </a>\n</div>\n<br/>',
                            header: false,
                            title: 'My Panel'
                        }
                    ],
                    items: [
                        {
                            xtype: 'panel',
                            region: 'center',
                            layout: 'border',
                            header: false,
                            title: 'My Panel',
                            items: [
                                {
                                    xtype: 'panel',
                                    flex: 1,
                                    region: 'center',
                                    id: 'calendarPanel',
                                    itemId: 'calendarPanel',
                                    title: 'Days Classification',
                                    layout: {
                                        type: 'hbox',
                                        align: 'middle',
                                        pack: 'center'
                                    },
                                    listeners: {
                                        afterrender: {
                                            fn: me.onCalendarPanelAfterRender,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onChartPanelAfterRender: function(component, eOpts) {
            //window.chart = Highcharts.Chart
            $('#chartPanel-innerCt').highcharts({
                chart: {
                    type: 'spline'
                },
                title: {
                    text: 'Cluster vs Day comparison'
                },
                xAxis: {
                    categories: [
                        '00:00',
                        '00:15',
                        '00:30',
                        '00:45',
                        '01:00',
                        '01:15',
                        '01:30',
                        '01:45',
                        '02:00',
                        '02:15',
                        '02:30',
                        '02:45',
                        '03:00',
                        '03:15',
                        '03:30',
                        '03:45',
                        '04:00',
                        '04:15',
                        '04:30',
                        '04:45',
                        '05:00',
                        '05:15',
                        '05:30',
                        '05:45',
                        '06:00',
                        '06:15',
                        '06:30',
                        '06:45',
                        '07:00',
                        '07:15',
                        '07:30',
                        '07:45',
                        '08:00',
                        '08:15',
                        '08:30',
                        '08:45',
                        '09:00',
                        '09:15',
                        '09:30',
                        '09:45',
                        '10:00',
                        '10:15',
                        '10:30',
                        '10:45',
                        '11:00',
                        '11:15',
                        '11:30',
                        '11:45',
                        '12:00',
                        '12:15',
                        '12:30',
                        '12:45',
                        '13:00',
                        '13:15',
                        '13:30',
                        '13:45',
                        '14:00',
                        '14:15',
                        '14:30',
                        '14:45',
                        '15:00',
                        '15:15',
                        '15:30',
                        '15:45',
                        '16:00',
                        '16:15',
                        '16:30',
                        '16:45',
                        '17:00',
                        '17:15',
                        '17:30',
                        '17:45',
                        '18:00',
                        '18:15',
                        '18:30',
                        '18:45',
                        '19:00',
                        '19:15',
                        '19:30',
                        '19:45',
                        '20:00',
                        '20:15',
                        '20:30',
                        '20:45',
                        '21:00',
                        '21:15',
                        '21:30',
                        '21:45',
                        '22:00',
                        '22:15',
                        '22:30',
                        '22:45',
                        '23:00',
                        '23:15',
                        '23:30',
                        '23:45'
                    ],
                    labels: {
                        rotation: 45,
                        step: 4
                    }
                },
                yAxis: {
                    title: {
                        text: 'Temperature'
                    },
                    labels: {
                        formatter: function () {
                            return this.value + ' Â°C';
                        }
                    }
                },
                tooltip: {
                    crosshairs: true,
                    shared: true
                },
                series: [{
                    name: 'Day Serie',
                    data: []

                }, {
                    name: 'Cluster Serie',
                    data: []
                }]
            });

        window.chart = Highcharts.charts[0];

    },

    onChartPanelResize: function(component, width, height, oldWidth, oldHeight, eOpts) {
        window.chart.reflow();
    },

    onCalendarPanelAfterRender: function(component, eOpts) {
        var datas = [];

        var parser = function(data) {
        	var stats = {};
        	for (var d in data) {
        		stats[data[d].date] = data[d].value;
        	}
        	return stats;
        };

        window.calDays = new CalHeatMap();
        window.calDays.init({
            itemSelector: "#calendarPanel-innerCt",
            itemName: ["cluster", "cluster"],
        	domain: "month",
        	subDomain: "x_day",
        	data: datas,
        	afterLoadData: parser,
            dataType: "json",
        	start: new Date(2014, 6, 1),
        	cellSize: 20,
        	cellPadding: 5,
        	domainGutter: 10,
        	range: 10,
        	verticalOrientation: true,
        	domainDynamicDimension: false,
        	displayLegend: false,
        	subDomainTextFormat: '%d',
        	domainLabelFormat: "%B %Y",
        	legend: [1, 2, 3, 4, 5, 6],
        	legendColors:  {
        		min: "lightgrey",
        		max: "red",
        		empty: "lightgrey"
        	},
        	onClick: function(date, nb) {
        		SSClusterViewer.getApplication().getController('ChartController').loadDay(date);
        	}

        });

    }

});